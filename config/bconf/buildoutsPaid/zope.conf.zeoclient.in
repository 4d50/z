%define INSTANCEHOME @zishinstancedir@/parts/zeoclient1
instancehome $INSTANCEHOME
%define CLIENTHOME @zishinstancedir@/parts/zeoclient1
clienthome $CLIENTHOME

products @zishinstancedir@/products
products @zishinstancedir@/parts/plone
products @zishinstancedir@/parts/productdistros

debug-mode on
security-policy-implementation python
verbose-security on

default-zpublisher-encoding utf-8

effective-user @USER@

zeo-client-name zeoclient1

<environment>    
	PYTHON_EGG_CACHE @zishinstancedir@/var/.python-eggs
	TMPDIR @zishinstancedir@/parts/instance/var/tmp
	PTS_LANGUAGES es,en,ca
</environment>


<eventlog>
  level INFO
  <logfile>
    path @zishinstancedir@/var/log/zeoclient1.log
    level INFO
  </logfile>
</eventlog>

<logger access>
  level WARN
  <logfile>
    path @zishinstancedir@/var/log/zeoclient1-Z2.log
    format %(message)s
  </logfile>
</logger>


<http-server>
  # valid keys are "address" and "force-connection-close"
  address 127.0.0.1:8080
  # force-connection-close on
  # You can also use the WSGI interface between ZServer and ZPublisher:
  # use-wsgi on
</http-server>


<persistent-cgi>
  path @zishhtmldir@/Zope.cgi
</persistent-cgi>


<zodb_db main>
    # Main database
    cache-size 5000
    
# ZEOStorage database
    <zeoclient>   
      server 127.0.0.1:8100
      storage 1
      name zeostorage
      var @zishinstancedir@/parts/zeoclient1/var
      cache-size 300MB
    </zeoclient>
# OR
# FileStorage database
#    <filestorage>
#      path @zishinstancedir@/var/filestorage/Data.fs
#    </filestorage>
    mount-point /
</zodb_db>

<zodb_db temporary>
    # Temporary storage database (for sessions)
    <temporarystorage>
      name temporary storage for sessioning
    </temporarystorage>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer
</zodb_db>

pid-filename @zishinstancedir@/var/zeoclient1.pid
lock-filename @zishinstancedir@/var/zeoclient1.lock


